{"version":3,"sources":["app/LocationContext.js","app/stations/direction/DirectionArrow.js","app/stations/Stations.js","app/App.js","index.js"],"names":["LocationContext","createContext","latitude","longitude","DirectionArrow","props","_useState","useState","_useState2","Object","slicedToArray","compass","setCompass","compassEnabled","useContext","CompassContext","location","compassHandler","e","compassValue","webkitCompassHeading","Math","abs","alpha","console","log","navigator","userAgent","match","window","addEventListener","style","transform","computeDirectionAngle","destinationLocation","height","react_default","a","createElement","src","className","currentLocation","northAngle","X","cos","sin","Y","atan2","PI","Stations","_this","classCallCheck","this","_super","call","state","stations","stationName","_step","_iterator","createForOfIteratorHelper","s","n","done","value","err","f","response","_step2","stationsCopy","slice","_iterator2","element","length","isStationInList","push","name","id","types","setState","_this2","undefined","context","params","URLSearchParams","rankby","type","fetch","googleNearbyAPI","method","headers","Content-Type","then","json","data","updateStationsFromResponse","reloadStationsList","Stack","Stations_StationsList","Paper","variant","elevation","React","Component","contextType","StationsList","_super2","map","Stations_Station","key","station","direction","spacing","getStations","Station","_this3","_super3","distance","duration","requestDistanceAPI","includes","firstElement","newState","_this4","destinations","origins","mode","googleDistanceAPI","handleDistanceResponse","destination_place_id","destination","travelmode","stationLocation","href","getStationLink","Box","sx","width","fontFamily","fontWeight","fontSize","padding","borderRadius","isTrainStation","isBusStation","DirectionArrow_DirectionArrow","App","setLatitude","_useState3","_useState4","setLongitude","_useState5","_useState6","setCompassEnabled","isIOS","geolocation","getCurrentPosition","position","coords","alert","AppBar","color","Button","onClick","DeviceOrientationEvent","requestPermission","catch","Provider","app_stations_Stations","title","require","config","ReactDOM","render","src_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.bc1590be.chunk.js","sourcesContent":["import { createContext } from \"react\"\n\nexport const LocationContext = createContext({latitude: null, longitude: null})","import React, { useContext, useState } from \"react\"\nimport { CompassContext } from \"../../App\"\nimport \"./DirectionArrow.css\"\nimport { LocationContext } from \"../../LocationContext\"\n\nfunction DirectionArrowIcon(props) {\n    return <img src=\"down-arrow.png\" style={{transform: props.transform}}></img>\n}\n\nexport function DirectionArrow(props) {\n\n    var [compass, setCompass] = useState(null)\n    const compassEnabled = useContext(CompassContext)\n    const location = useContext(LocationContext)\n\n    var startCompass = () => {\n        const isIOS = (\n            navigator.userAgent.match(/(iPod|iPhone|iPad)/) &&\n            navigator.userAgent.match(/AppleWebKit/)\n        );\n    \n        if (isIOS) {\n            window.addEventListener(\"deviceorientation\", compassHandler, true);       \n        } else {\n            window.addEventListener(\"deviceorientationabsolute\", compassHandler, true);\n        }\n    }\n\n    var compassHandler = (e) => {\n        let compassValue = e.webkitCompassHeading || Math.abs(e.alpha - 360);\n        console.log(compassValue)\n        setCompass(compassValue)\n    }\n\n    if (compassEnabled) {\n        startCompass()\n    }\n\n\n    var style = {\n        transform: \"rotate(\" + (computeDirectionAngle(location, props.destinationLocation, compass) + 180) + \"deg)\",\n        height: \"2.5em\"\n    }\n\n    return <div>\n        {\n            compassEnabled &&\n            <img src=\"down-arrow.png\" className=\"compass-arrow\" style={style}></img>\n        }\n    </div>\n}\n\nfunction computeDirectionAngle(currentLocation, destinationLocation, northAngle) {\n    const X = Math.cos(destinationLocation.latitude) * Math.sin(destinationLocation.longitude - currentLocation.longitude);\n    const Y = Math.cos(currentLocation.latitude) * Math.sin(destinationLocation.latitude) - Math.sin(currentLocation.latitude) * Math.cos(destinationLocation.latitude) * Math.cos(destinationLocation.longitude - currentLocation.longitude);\n\n    const beta = Math.atan2(X,Y)\n    const angle = beta * 180 / Math.PI\n    return angle - northAngle;\n}","import { Paper, Stack, Box} from '@mui/material';\nimport React from 'react'\nimport { LocationContext } from '../LocationContext';\nimport { DirectionArrow } from './direction/DirectionArrow';\nimport \"./Stations.css\"\n\nconst googleNearbyAPI = \"https://city-navigator-gateway.onrender.com/nearby\";\nconst googleDistanceAPI = \"https://city-navigator-gateway.onrender.com/distance\";\n\nconst MAX_STATION_AMOUNT = 10;\n\nclass Stations extends React.Component {\n\n    static contextType = LocationContext;\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            stations: []\n        }\n    }\n\n    isStationInList(stations, stationName) {\n        for (const station of stations) {\n            if (station[\"name\"] === stationName)\n                return true;\n        }\n        return false;\n    }\n\n    updateStationsFromResponse(response) {\n        var stationsCopy = this.state.stations.slice()\n\n        for (const element of response['results']) {\n            if (stationsCopy.length >= MAX_STATION_AMOUNT)\n                break\n\n            if (!this.isStationInList(stationsCopy, element[\"name\"])){\n                stationsCopy.push(\n                    {\n                        \"name\": element[\"name\"],\n                        \"id\": element[\"place_id\"],\n                        \"latitude\": element[\"geometry\"][\"location\"][\"lat\"],\n                        \"longitude\": element[\"geometry\"][\"location\"][\"lng\"],\n                        \"types\": element[\"types\"],\n                    }\n                )\n            }\n        }\n\n        this.setState({stations: stationsCopy})\n    }\n\n    reloadStationsList() {\n        if (this.context == undefined || !this.context.latitude == undefined || !this.context.longitude == undefined) return\n\n        var params = new URLSearchParams({\n            location: this.context.latitude + \", \" + this.context.longitude,\n            rankby: \"distance\",\n            type: \"train_station\"\n        })\n        const apiRequest = googleNearbyAPI + \"?\" + params\n\n        fetch(\n            apiRequest, \n            {\n                method: 'GET',\n                headers: {'Content-Type':'application/json'},\n            }\n        )\n        .then(response => response.json())\n        .then(data => this.updateStationsFromResponse(data))\n    }\n\n    componentDidMount() {\n        this.reloadStationsList()\n    }\n\n    render() {\n        var location = this.context\n\n        return <Stack>\n                    <StationsList stations={this.state.stations}></StationsList>\n                    <Paper variant=\"elevation\" elevation={2} className=\"location-block\">\n                        <div>\n                            Current location: \n                            <div>\n                                {location.latitude}\n                            </div> \n                            <div>\n                                {location.longitude}\n                            </div>\n                        </div>\n                    </Paper>\n                </Stack>;\n    }\n}\n\n\nexport default Stations;\n\nclass StationsList extends React.Component {\n    \n\n    constructor(props) {\n        super(props)\n    }\n\n    getStations() {\n        var location = this.context\n\n        return this.props.stations.map(element => {\n            return <Station\n                name={element[\"name\"]} key={element[\"id\"]} \n                station={element}>\n            </Station>\n        })\n    };\n\n    render() {\n        return <div className=\"stations-container\"\n            direction=\"column\"\n            // justifyContent=\"flex-start\"\n            // alignItems=\"center\"\n            spacing={2}>\n                {this.getStations()}\n            </div>;\n    }\n}\n\nclass Station extends React.Component {\n        static contextType = LocationContext;\n\n        constructor(props) {\n            super(props)\n            this.state = {\n                distance: \"\",\n                duration: \"\",\n            }\n            this.requestDistanceAPI()\n        }\n    \n        isBusStation() {\n            return this.props.station[\"types\"].includes(\"bus_station\")\n        }\n    \n        isTrainStation() {\n            return this.props.station[\"types\"].includes(\"train_station\")\n        }\n    \n        handleDistanceResponse(response) {\n            if (response[\"rows\"].length === 0 || response[\"rows\"][0][\"elements\"].length === 0) {\n                return\n            }\n    \n            var firstElement = response[\"rows\"][0][\"elements\"][0]\n    \n            var newState = {\n                distance: firstElement[\"distance\"][\"text\"],\n                duration: firstElement[\"duration\"][\"text\"]\n            }\n    \n            this.setState(newState);\n        }\n    \n        requestDistanceAPI() {\n            if (!this.context) return\n\n            var location = this.context\n\n            var params = new URLSearchParams({\n                destinations: \"place_id:\" + this.props.station[\"id\"],\n                origins: location.latitude + \", \" + location.longitude,\n                mode: \"walking\"\n            })\n            const apiRequest = googleDistanceAPI + \"?\" + params\n\n            fetch(apiRequest)\n            .then(response => response.json())\n            .then(data => this.handleDistanceResponse(data))\n        }\n\n        componentDidMount() {\n            this.requestDistanceAPI()\n        }\n\n        getStationLink() {\n            var location = this.context\n\n            var params = new URLSearchParams({\n                destination_place_id: this.props.station[\"id\"],\n                destination: this.props.name,\n                origins: location.latitude + \", \" + location.longitude,\n                travelmode: \"walking\"\n            })\n\n            return \"https://www.google.com/maps/dir/?api=1&\" + params;\n\n        }\n    \n        render() {\n            const stationLocation = {\n                latitude: this.props.station.latitude,\n                longitude: this.props.station.longitude\n            }\n            return  <a href={this.getStationLink()} className=\"station\">\n                        <Paper variant=\"elevation\" elevation={4}>\n                            <Box sx={{width: 350, fontFamily: \"Jetbrains Mono, monospace\", fontWeight: 600, fontSize: \"1.2em\", padding: \"10px 10px\", borderRadius: \"10px\"}}>\n                                <div className=\"station-box\">\n                                    <div>\n                                        <div>\n                                            {\n                                                this.isTrainStation() &&\n                                                <img className=\"transport-icon\" src={\"/train-public-transport.png\"} />\n                                            }\n                                            {\n                                                this.isBusStation() &&\n                                                <img className=\"transport-icon\" src={\"/bus-public-transport.png\"} />\n                                            }\n                                        </div>\n                                        <div>{this.props.name}</div>\n                                        <div className=\"station-info\">\n                                            <div>{this.state.distance}</div>\n                                            <div>{this.state.duration}</div>\n                                        </div>\n                                    </div>\n                                    <div className=\"direction-arrow-box\">\n                                        <DirectionArrow destinationLocation={stationLocation}></DirectionArrow>\n                                    </div>\n                                </div>\n                            </Box>\n                        </Paper>\n                    </a>\n        }\n    }\n\n\n// function getLocation(setLatitude, setLongitude) {\n//     if(navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(function(position) {\n//           setLatitude(position.coords.latitude)\n//           setLongitude(position.coords.longitude)\n//         })\n//     } else {\n//         alert(\"Sorry, your browser does not support HTML5 geolocation.\");\n//     }\n// }\n\n","import './App.css';\nimport Stations from \"./stations/Stations\"\nimport React, { createContext, useState } from 'react';\nimport { AppBar, Button } from '@mui/material';\nimport { LocationContext } from './LocationContext';\n\nexport const CompassContext = createContext(null) \n\nconst App = () => {\n\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n\n  const [compassEnabled, setCompassEnabled] = useState(false);\n\n  const isIOS = (\n    navigator.userAgent.match(/(iPod|iPhone|iPad)/) &&\n    navigator.userAgent.match(/AppleWebKit/)\n  );\n\n  if(navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setLatitude(position.coords.latitude)\n      setLongitude(position.coords.longitude)\n    })\n  } else {\n    alert(\"Sorry, your browser does not support HTML5 geolocation.\");\n  }\n\n  var requestCompassPermission = () => {\n    if (isIOS) {\n      DeviceOrientationEvent.requestPermission()\n      .then((response) => {\n        if (response === \"granted\") {\n          setCompassEnabled(true);\n        } else {\n          setCompassEnabled(false);\n          alert(\"Compass has to be allowed!\");\n        }\n      })\n      .catch((e) => {\n        alert(e);\n        setCompassEnabled(false)\n      });\n    } else {\n      setCompassEnabled(true);\n    }\n  }\n\n  return (\n    <div>\n      <header>\n        <AppBar className='App-header' position=\"static\" color=\"default\" variant=\"elevation\">\n          <img className='bar-logo' src='/icon.png'></img>\n          <span>City Navigator</span>\n        </AppBar>\n      </header>\n      <main>\n        {\n          isIOS && !compassEnabled &&\n          <Button variant=\"contained\" onClick={requestCompassPermission} className=\"compass-button\">Enable compass</Button>\n        }\n        <LocationContext.Provider value={{latitude: latitude, longitude: longitude}}>\n          <CompassContext.Provider value={compassEnabled}>\n            { latitude != null && longitude != null &&\n              <Stations></Stations>\n            }\n          </CompassContext.Provider>\n        </LocationContext.Provider>\n      </main>\n      <footer><a href=\"https://www.flaticon.com/free-icons/\" title=\"icons\">Icons created by Google - Flaticon</a></footer>\n    </div>\n  );\n}\n  \n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App'\nimport './index.css';\n\nrequire('dotenv').config()\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}